{{/* gotype: github.com/woocoos/kocli/gentool.EnumInput */}}
{{ define "enum" }}
package types

// Code generated by:  kocli gen enum -b {{.BaseType}} -n {{.EnumName}} -v{{" "}}
{{- range $index, $value := .Values }}{{ if $index }},{{ end }}{{ $value }}{{ end }}

{{ $TypeName := pascal .EnumName  }}
// {{ $TypeName }} enum definition
type {{ $TypeName }} {{ .BaseType }}

const (
{{- if eq .BaseType "int" }}
{{- range $index, $value := .Values }}
	{{ $TypeName }}{{ pascal $value }} {{ $TypeName }} = {{ $index }}
{{- end }}
{{- else if eq .BaseType "string" }}
{{- range $index, $value := .Values }}
	{{ $TypeName }}{{ pascal $value }} {{ $TypeName }} = "{{ $value }}"
{{- end }}
{{- end }}
)

func (e {{ $TypeName }}) String() string {
    {{- if eq .BaseType "string" }}
        return string(e)
    {{- else if eq .BaseType "int" }}
	switch e {
    {{- range $index, $value := .Values }}
    case {{ $TypeName }}{{ pascal $value }}:
        return "{{ $value }}"
    {{- end }}
    default:
        return "Unknown"
    }
    {{- end }}
}

// Values implements ent EnumValues interface
func (e {{ $TypeName }}) Values() []string {
	return []string{
{{- range $index, $value := .Values }}
		{{ $TypeName }}{{ pascal $value }}.String(),
{{- end }}
	}
}

// MarshalGQL implements graphql.Marshaler.
func (e {{ $TypeName }}) MarshalGQL(w io.Writer) {
{{- if eq .BaseType "int" }}
	io.WriteString(w, strconv.Quote(e.String()))
{{- else if eq .BaseType "string" }}
	io.WriteString(w, strconv.Quote(e.String()))
{{- end }}
}

// UnmarshalGQL implements graphql.Unmarshaler.
func (e *{{ $TypeName }}) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("{{$TypeName}} must be strings")
	}
{{- if eq .BaseType "int" }}
	switch str {
{{- range $index, $value := .Values }}
	case "{{ $value }}":
		*e = {{ $TypeName }}{{ pascal $value }}
{{- end }}
	default:
		return fmt.Errorf("%q is not a valid {{ $TypeName }}", str)
	}
{{- else if eq .BaseType "string" }}
    *e = {{ $TypeName }}(str)
{{- end }}
	return {{ $TypeName }}Validator(*e)
}

// {{ $TypeName }}Validator validates {{ $TypeName }} enum value
func {{ $TypeName }}Validator(et {{ $TypeName }}) error {
	switch et {
	case {{ range $index, $value := .Values }}{{ if $index }},{{ end }}{{ $TypeName }}{{ pascal $value }}{{ end }}:
		return nil
	default:
		return fmt.Errorf("invalid enum value for {{ $TypeName }} field: %q", et)
	}
}

// Value implements driver.Valuer
func (e {{ $TypeName }}) Value() (driver.Value, error) {
    {{- if eq .BaseType "int" }}
        return int(e), nil
    {{- else if eq .BaseType "string" }}
        return string(e), nil
    {{- end }}
}

// Scan implements sql.Scanner
func (e *{{ $TypeName }}) Scan(value any) error {
    switch v := value.(type) {
    case nil:
        return nil
    {{- if eq .BaseType "int" }}
    case {{.BaseType}}:
        *e = {{ $TypeName }}(v)
    {{- else if eq .BaseType "string" }}
    case string:
        *e = {{ $TypeName }}(v)
    case []byte:
        *e = {{ $TypeName }}(string(v))
    {{- end }}
    default:
        return fmt.Errorf("unsupported type for %s: %T", "{{ $TypeName }}", value)
    }
    return nil
}
{{ end }}