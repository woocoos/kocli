{{/* gotype: github.com/tsingsun/woocoo/cmd/woco/project.Graph */}}

{{ define "main" }}

{{ with $.Header }}{{ . }}{{ end }}
package main

import(
    "entgo.io/contrib/entgql"
    "github.com/99designs/gqlgen/graphql/handler"
    "github.com/tsingsun/woocoo"
    "github.com/tsingsun/woocoo/contrib/gql"
    "github.com/tsingsun/woocoo/pkg/conf"
    "github.com/tsingsun/woocoo/pkg/log"
    "github.com/tsingsun/woocoo/web"
    "github.com/woocoos/entco/ecx"
    "github.com/woocoos/entco/ecx/oteldriver"
    "github.com/tsingsun/woocoo/pkg/log"
    "github.com/tsingsun/woocoo/rpc/grpcx"
    "{{ .Config.Package }}/cmd/internal/otel"
    "{{ .Config.Package }}/ent"
    _ "github.com/go-sql-driver/mysql"
    // runtime remove when ent ready
    // _ "{{ .Config.Package }}/ent/runtime"
)
var (
    dbClient *ent.Client
)
func main(){
    app := woocoo.New()
    cnf := app.AppConfiguration()
    buildEntClient(cnf)
    defer dbClient.Close()

    otelStop := otel.Apply(cnf)
    defer otelStop()

    err := snowflake.SetDefaultNode(cnf.Sub("snowflake"))
    if err != nil {
        log.Panic(err)
    }
    {{- if .HasModule "web" }}
        webSrv := buildWebServer(cnf)
        app.RegisterServer(webSrv)
    {{- end }}
    {{ if .HasModule "grpc"}}
        grpcSrv := newGRPCServer(cnf)
        app.RegisterServer(grpcSrv)
    {{- end }}
    if err := app.Run(); err != nil {
        log.Panic(err)
    }
}
    func buildEntClient(cnf *conf.AppConfiguration) *ent.Client {
        pd := oteldriver.BuildOTELDriver(cnf, "store.{{ pkgName $.Package }}")
        pd = ecx.BuildEntCacheDriver(cnf, pd)
        if cnf.Development {
            dbClient = ent.NewClient(ent.Driver(pd), ent.Debug())
        } else {
            dbClient = ent.NewClient(ent.Driver(pd))
        }
        return dbClient
    }
{{ if .HasModule "web" }}
    func buildWebServer(cnf *conf.AppConfiguration) *web.Server {
        webSrv := web.New(web.WithConfiguration(cnf.Sub("web")),
            web.WithGracefulStop(),
            web.RegisterMiddleware(gql.New()),
            web.RegisterMiddleware(otelweb.NewMiddleware()),
            web.RegisterMiddleware(authz.New()),
            identity.RegistryTenantIDMiddleware(),
        )
        // TODO below is example,you must initial graphql server after init project
        gqlsrv := handler.New(nil)
        //gqlSrv := handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{
        //    Resolvers: &graphql.Resolver{
        //        Client:   dbClient,
        //        Resource: &resource.Service{Client: dbClient},
        //    },
        //}))

        // entcache
        if cnf.Root.String("entcache.level") == "context" {
            gqlSrv.AroundResponses(gqlx.ContextCache())
        }
        // pagination by page and limit
        gqlSrv.AroundResponses(gqlx.SimplePagination())
        // mutation transaction
        gqlSrv.Use(entgql.Transactioner{TxOpener: dbClient})

        if err := gql.RegisterGraphqlServer(webSrv, gqlSrv); err != nil {
            log.Fatal(err)
        }
        return webSrv
    }
{{- end }}

{{ if .HasModule "grpc"}}
    func newGRPCServer(cnf *conf.AppConfiguration) *grpcx.Server {
        grpcSrv := grpcx.New(grpcx.WithConfiguration(cnf.Sub("grpc")), grpcx.WithGracefulStop(),grpcx.WithGrpcLogger())
        // TODO register grpc service
        return grpcSrv
    }
{{ end }}

{{ end }}

{{ define "cmd/internal/otel/otel" }}
{{ with $.Header }}{{ . }}{{ end }}
package otel

import (
	"github.com/tsingsun/woocoo/contrib/telemetry"
	"github.com/tsingsun/woocoo/pkg/conf"
	"go.opentelemetry.io/contrib/propagators/b3"
)

// Apply 尝试注册otel,如果配置中有otel配置,则注册.并返回关闭函数
func Apply(cnf *conf.AppConfiguration) func() {
	if cnf.IsSet("otel") {
		otelCnf := cnf.Sub("otel")
		otelcfg := telemetry.NewConfig(otelCnf,
			telemetry.WithPropagator(b3.New()),
		)
		return func() {
			otelcfg.Shutdown()
		}
	}
	return func() {}
}

{{ end }}