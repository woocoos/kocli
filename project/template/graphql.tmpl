{{/* gotype: github.com/tsingsun/woocoo/cmd/woco/project.Graph */}}

{{ define "api/graphql/server" }}
package graphql

import(
    "github.com/tsingsun/woocoo"
    "github.com/99designs/gqlgen/graphql/handler"
	"github.com/tsingsun/woocoo/contrib/gql"
	"github.com/tsingsun/woocoo/contrib/telemetry/otelweb"
	"github.com/woocoos/knockout-go/pkg/koapp"
	"github.com/woocoos/knockout-go/pkg/middleware"
	"github.com/woocoos/knockout-go/api"
)

type Server struct {
	db        *ent.Client
	webSrv       *web.Server
	gqlSrv   *handler.Server
	resolver *Resolver
    kosdk        *api.SDK
}

func NewServer(app *woocoo.App) (*Server,error) {
	s := &Server{}
	cnf := app.AppConfiguration()
	ents := koapp.BuildEntComponents(cnf)
	drv := ents["{{ pkgName $.Package }}"]
	if cnf.Development {
		s.db = ent.NewClient(ent.Driver(drv), ent.Debug())
	} else {
		s.db = ent.NewClient(ent.Driver(drv))
	}

	var err error
	s.kosdk, err = api.NewSDK(cnf.Sub("kosdk"))
	if err != nil {
		panic(err)
	}

	s.buildWebEngine(app)

	app.RegisterServer(s.webSrv)

	return s, nil
}

func (s *Server) Start(ctx context.Context) error {
	return nil
}

func (s *Server) Stop(ctx context.Context) error {
	s.db.Close()
	return nil
}

func (s *Server) buildWebEngine(app *woocoo.App) {
	cnf := app.AppConfiguration()
	s.webSrv = web.New(web.WithConfiguration(cnf.Sub("web")),
		web.WithGracefulStop(),
		gql.RegisterMiddleware(),
		otelweb.RegisterMiddleware(),
		web.WithMiddlewareNewFunc("authz", authz.Middleware),
		middleware.RegisterTenantID(),
		middleware.RegisterTokenSigner(),
	)
	s.resolver = NewResolver(WithEntClient(s.db))
	s.gqlSrv = handler.NewDefaultServer(NewSchema(s.resolver))
	s.gqlSrv.AroundResponses(middleware.SimplePagination())
	// mutation transaction
    s.gqlSrv.Use(entgql.Transactioner{TxOpener: s.db})

    if err := gql.RegisterGraphqlServer(s.webSrv, s.gqlSrv); err != nil {
		panic(err)
	}
}
{{ end }}