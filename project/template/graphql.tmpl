{{/* gotype: github.com/tsingsun/woocoo/cmd/woco/project.Graph */}}

{{ define "api/graphql/server" }}
package graphql

import(
    "github.com/tsingsun/woocoo"
    "github.com/99designs/gqlgen/graphql/handler"
	"github.com/tsingsun/woocoo/contrib/gql"
	"github.com/tsingsun/woocoo/contrib/telemetry/otelweb"
	"github.com/woocoos/knockout-go/pkg/koapp"
	"github.com/woocoos/knockout-go/pkg/middleware"
	"github.com/woocoos/knockout-go/api"
)

type ServerOption struct {
	DB    *ent.Client
	KOSDK *api.SDK
}

type Server struct {
    ServerOption
	webSrv       *web.Server
	gqlSrv   *handler.Server
	resolver *Resolver
}

func NewServer(app *woocoo.App, option ServerOption) (s *Server, err error) {
	s = &Server{
		ServerOption: option,
	}
	cnf := app.AppConfiguration()
    if cnf.IsSet("web") {
        s.buildWebEngine(cnf)
    }
	return s, nil
}

func (s *Server) Start(ctx context.Context) error {
    return s.webSrv.Start(ctx)
}

func (s *Server) Stop(ctx context.Context) error {
	return nil
}

func (s *Server) buildWebEngine(cnf *conf.AppConfiguration) {
	s.webSrv = web.New(web.WithConfiguration(cnf.Sub("web")),
		web.WithGracefulStop(),
		gql.RegisterMiddleware(),
		otelweb.RegisterMiddleware(),
		web.WithMiddlewareNewFunc("authz", authz.Middleware),
		middleware.RegisterTenantID(),
		middleware.RegisterTokenSigner(),
	)
    s.resolver = NewResolver(WithEntClient(s.DB))
    ss,err := gql.RegisterSchema(s.webSrv, NewSchema(s.resolver))
    if err != nil {
        panic(err)
    }
    s.gqlSrv = ss[0]
    s.gqlSrv.AroundResponses(middleware.SimplePagination())
    // mutation transaction
    s.gqlSrv.Use(entgql.Transactioner{TxOpener: s.DB})
}
{{ end }}