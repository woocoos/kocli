{{/* gotype: github.com/tsingsun/woocoo/cmd/woco/project.Graph */}}
{{ define "codegen/entgen/entc" }}
//go:build ignore

package main

import (
	"entgo.io/contrib/entgql"
	"entgo.io/ent/entc"
	"entgo.io/ent/entc/gen"
	entcachegen "github.com/woocoos/entcache/gen"
	"github.com/woocoos/knockout-go/codegen/entx"
	"log"
	"os"
)

func main() {
	ex, err := entgql.NewExtension(
	    entx.WithGqlWithTemplates(),
		entgql.WithSchemaGenerator(),
		entgql.WithWhereInputs(true),
		entgql.WithConfigPath("codegen/gqlgen/gqlgen.yaml"),
		entgql.WithSchemaPath("api/graphql/ent.graphql"),
		entgql.WithSchemaHook(entx.ChangeRelayNodeType()),
	)
	if err != nil {
		log.Fatalf("creating entgql extension: %v", err)
	}
	os.MkdirAll("./api/graphql", os.ModePerm)
	opts := []entc.Option{
		entc.Extensions(ex),
		entx.GlobalID(),
		entx.SimplePagination(),
		entcachegen.QueryCache(),
	}
	err = entc.Generate("./codegen/entgen/schema", &gen.Config{
		Package:  "{{ .Config.Package }}/ent",
		Features: []gen.Feature{gen.FeatureVersionedMigration, gen.FeatureUpsert,
		    gen.FeatureIntercept,gen.FeatureSchemaConfig},
		Target:   "./ent",
	}, opts...)
	if err != nil {
		log.Fatalf("running ent codegen: %v", err)
	}
}
{{ end }}

{{ define "codegen/gqlgen/gqlgen" }}
//go:build ignore

package main

import (
	"github.com/99designs/gqlgen/api"
	"github.com/99designs/gqlgen/codegen/config"
	"github.com/99designs/gqlgen/plugin/modelgen"
	"github.com/woocoos/knockout-go/codegen/gqlx"
	"log"
	"os"
)

func main() {
	cfg, err := config.LoadConfig("./codegen/gqlgen/gqlgen.yaml")
	if err != nil {
		log.Print("failed to load config", err.Error())
		os.Exit(2)
	}

	// Attaching the mutation function onto modelgen plugin
	p := modelgen.Plugin{}

	err = api.Generate(cfg, api.ReplacePlugin(&p),
	    api.AddPlugin(gqlx.NewResolverPlugin(gqlx.WithRelayNodeEx(), gqlx.WithConfig(cfg))),
	)

	if err != nil {
		log.Print(err.Error())
		os.Exit(3)
	}
}

{{ end }}

{{ define "codegen/gqlgen/gqlgen.yaml" }}
schema:
  - api/graphql/ent.graphql

# Where should the generated server code go?
exec:
  layout: follow-schema
  dir: api/graphql/generated
  package: generated

# Where should any generated models go?
model:
  filename: api/graphql/model/models_gen.go
  package: model

# resolver reports where the resolver implementations go.
resolver:
  layout: follow-schema
  dir: api/graphql
  package: graphql

# Optional: set to skip running `go mod tidy` when generating server code
skip_mod_tidy: true

# Optional: turn on to exclude the gqlgen version in the generated file notice. No effect if `omit_gqlgen_file_notice` is true.
omit_gqlgen_version_in_file_notice: true

# gqlgen will search for any type names in the schema in the generated
# ent package. If they match it will use them, otherwise it will new ones.
autobind:
  - {{ .Config.Package }}/ent

models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.IntID
  GID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
  Node:
    model:
      # ent.Noder is the new interface generated by the Node template.
      - {{ .Config.Package }}/ent.Noder
directives:
  constraint:
    skip_runtime: true
{{ end }}

{{ define "api/graphql/model/doc" }}
package model
{{ end }}

{{ define "version/info" }}
package version
const (
    AppCode = "{{ pkgName $.Package }}"
    Version = "0.0.1"
)
{{ end }}

{{ define "codegen/entgen/schema" }}
{{ end }}

{{ define "codegen/entgen/schema/hello" }}
package schema

import (
	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax"
)

// Hello holds the schema definition for the HelloWorld entity.
type Hello struct {
	ent.Schema
}

func (Hello) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{Table: "hello"},
		schemax.TenantField("tenant_id"),
		entgql.QueryField(),
		entgql.RelayConnection(),
		entgql.Mutations(entgql.MutationCreate(), entgql.MutationUpdate()),
	}
}

func (Hello) Mixin() []ent.Mixin {
	return []ent.Mixin{
		schemax.IntID{},
		schemax.AuditMixin{},
        // this is a tenant mixin, but depends the code after gen ent, you should manual enables.
        //
        // import "{project}/ent/intercept"
        // schemax.NewTenantMixin[intercept.Query, *gen.Client](version.AppCode, intercept.NewQuery),
		//schemax.NewTenantMixin[intercept.Query, *gen.Client](version.AppCode, intercept.NewQuery),
	}
}

// Fields of the Hello.
func (Hello) Fields() []ent.Field {
	return []ent.Field{
	    field.Int("tenant_id").Comment("组织ID").Annotations(entgql.Type("ID")),
		field.Time("born"),
	}
}

// Edges of the Hello.
func (Hello) Edges() []ent.Edge {
	return nil
}

{{ end }}


{{ define "codegen/entgen/schema/world" }}
package schema

import (
	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"
	"github.com/woocoos/knockout-go/ent/schemax"
)

// World holds the schema definition for the HelloWorld entity.
type World struct {
	ent.Schema
}

func (World) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{Table: "world"},
		schemax.TenantField("tenant_id"),
		entgql.QueryField(),
		entgql.RelayConnection(),
		entgql.Mutations(entgql.MutationCreate(), entgql.MutationUpdate()),
	}
}

func (World) Mixin() []ent.Mixin {
	return []ent.Mixin{
		schemax.SnowFlakeID{},
		schemax.AuditMixin{},
		// this is a tenant mixin, but depends the code after gen ent, you should manual enables.
		//
		// import "{project}/ent/intercept"
		// schemax.NewTenantMixin[intercept.Query, *gen.Client](version.AppCode, intercept.NewQuery),
		schemax.NotifyMixin{},
	}
}

// Fields of the World.
func (World) Fields() []ent.Field {
	return []ent.Field{
	    field.Int("tenant_id").Comment("组织ID").Annotations(entgql.Type("ID")),
		field.String("zone"),
	}
}

// Edges of the World.
func (World) Edges() []ent.Edge {
	return nil
}

{{ end }}