package enum

import (
	"database/sql/driver"
	"fmt"
	"io"
	"strconv"
)

// Code generated by:  kocli gen enum -b int -n intBase  -v value1,Value2,Value3

// IntBase enum definition
type IntBase int

const (
	IntBaseValue1 IntBase = 1
	IntBaseValue2 IntBase = 2
	IntBaseValue3 IntBase = 3
)

// String returns the readable string representation of the IntBase.
func (e IntBase) String() string {
	switch e {
	case IntBaseValue1:
		return "value1"
	case IntBaseValue2:
		return "Value2"
	case IntBaseValue3:
		return "Value3"
	default:
		return "Unknown"
	}
}

// Values implements ent EnumValues interface
func (e IntBase) Values() []string {
	return []string{
		IntBaseValue1.String(),
		IntBaseValue2.String(),
		IntBaseValue3.String(),
	}
}

// MarshalGQL implements graphql.Marshaler.
func (e IntBase) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler.
func (e *IntBase) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enum IntBase must be strings,but %v", v)
	}
	switch str {
	case "value1":
		*e = IntBaseValue1
	case "Value2":
		*e = IntBaseValue2
	case "Value3":
		*e = IntBaseValue3
	default:
		return fmt.Errorf("%q is not a valid IntBase", str)
	}
	return nil
}

// IntBaseValidator validates IntBase enum value
func IntBaseValidator(et IntBase) error {
	switch et {
	case IntBaseValue1, IntBaseValue2, IntBaseValue3:
		return nil
	default:
		return fmt.Errorf("invalid enum value for IntBase field: %q", et)
	}
}

// Value implements driver.Valuer
func (e IntBase) Value() (driver.Value, error) {
	return int64(e), nil
}

// Scan implements sql.Scanner
func (e *IntBase) Scan(value any) error {
	switch v := value.(type) {
	case nil:
		return nil
	case int:
		*e = IntBase(v)
	case int64:
		*e = IntBase(v)
	default:
		return fmt.Errorf("unsupported type for %s: %T", "IntBase", value)
	}
	return nil
}
