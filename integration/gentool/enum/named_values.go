package enum

import (
	"database/sql/driver"
	"fmt"
	"io"
	"strconv"
)

// Code generated by:  kocli gen enum -b string -n namedValues -i -v Name1,value1,Name2,Value2,Name3,Value3

// NamedValues enum definition
type NamedValues string

const (
	NamedValuesName1 NamedValues = "value1"
	NamedValuesName2 NamedValues = "Value2"
	NamedValuesName3 NamedValues = "Value3"
)

// String returns the readable string representation of the NamedValues.
func (e NamedValues) String() string {
	switch e {
	case NamedValuesName1:
		return "Name1"
	case NamedValuesName2:
		return "Name2"
	case NamedValuesName3:
		return "Name3"
	default:
		return "Unknown"
	}
}

// Values implements ent EnumValues interface
func (e NamedValues) Values() []string {
	return []string{
		NamedValuesName1.String(),
		NamedValuesName2.String(),
		NamedValuesName3.String(),
	}
}

// MarshalGQL implements graphql.Marshaler.
func (e NamedValues) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler.
func (e *NamedValues) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enum NamedValues must be strings,but %v", v)
	}
	switch str {
	case "Name1":
		*e = NamedValuesName1
	case "Name2":
		*e = NamedValuesName2
	case "Name3":
		*e = NamedValuesName3
	default:
		return fmt.Errorf("%q is not a valid NamedValues", str)
	}
	return nil
}

// NamedValuesValidator validates NamedValues enum value
func NamedValuesValidator(et NamedValues) error {
	switch et {
	case NamedValuesName1, NamedValuesName2, NamedValuesName3:
		return nil
	default:
		return fmt.Errorf("invalid enum value for NamedValues field: %q", et)
	}
}

// Value implements driver.Valuer
func (e NamedValues) Value() (driver.Value, error) {
	return string(e), nil
}

// Scan implements sql.Scanner
func (e *NamedValues) Scan(value any) error {
	switch v := value.(type) {
	case nil:
		return nil
	case string:
		*e = NamedValues(v)
	case []byte:
		*e = NamedValues(string(v))
	default:
		return fmt.Errorf("unsupported type for %s: %T", "NamedValues", value)
	}
	return nil
}
