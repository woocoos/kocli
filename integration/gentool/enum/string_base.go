package enum

import (
	"database/sql/driver"
	"fmt"
	"io"
	"strconv"
)

// Code generated by:  kocli gen enum -b string -n stringBase  -v value1,Value2,Value3

// StringBase enum definition
type StringBase string

const (
	StringBaseValue1 StringBase = "value1"
	StringBaseValue2 StringBase = "Value2"
	StringBaseValue3 StringBase = "Value3"
)

// String returns the readable string representation of the StringBase.
func (e StringBase) String() string {
	return string(e)
}

// Values implements ent EnumValues interface
func (e StringBase) Values() []string {
	return []string{
		StringBaseValue1.String(),
		StringBaseValue2.String(),
		StringBaseValue3.String(),
	}
}

// MarshalGQL implements graphql.Marshaler.
func (e StringBase) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler.
func (e *StringBase) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enum StringBase must be strings,but %v", v)
	}
	switch str {
	case "value1":
		*e = StringBaseValue1
	case "Value2":
		*e = StringBaseValue2
	case "Value3":
		*e = StringBaseValue3
	default:
		return fmt.Errorf("%q is not a valid StringBase", str)
	}
	return nil
}

// StringBaseValidator validates StringBase enum value
func StringBaseValidator(et StringBase) error {
	switch et {
	case StringBaseValue1, StringBaseValue2, StringBaseValue3:
		return nil
	default:
		return fmt.Errorf("invalid enum value for StringBase field: %q", et)
	}
}

// Value implements driver.Valuer
func (e StringBase) Value() (driver.Value, error) {
	return string(e), nil
}

// Scan implements sql.Scanner
func (e *StringBase) Scan(value any) error {
	switch v := value.(type) {
	case nil:
		return nil
	case string:
		*e = StringBase(v)
	case []byte:
		*e = StringBase(string(v))
	default:
		return fmt.Errorf("unsupported type for %s: %T", "StringBase", value)
	}
	return nil
}
